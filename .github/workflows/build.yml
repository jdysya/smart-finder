name: Build and Package

on:
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main, develop ]
  release:
    types: [ published ]

permissions:
  contents: write

env:
  GO_VERSION: '1.24'
  CGO_ENABLED: 0

jobs:
  build-client:
    name: Build Client
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            ext: ""
          - os: windows-latest
            platform: windows
            arch: amd64
            ext: ".exe"
          - os: windows-latest
            platform: windows
            arch: arm64
            ext: ".exe"
          - os: macos-latest
            platform: darwin
            arch: amd64
            ext: ""
          - os: macos-latest
            platform: darwin
            arch: arm64
            ext: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install Frontend Dependencies
      run: |
        cd client-front
        pnpm install

    - name: Build Frontend
      run: |
        cd client-front
        pnpm build
    
    - name: Copy Frontend to Client
      run: |
        rm -rf client/web
        mkdir -p client/web
        cp -r client-front/out/* client/web/


    - name: Set up build dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates

    - name: Set up build dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # No additional dependencies needed for static builds
        echo "Static build - no additional dependencies required"

    - name: Set up build dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # No additional dependencies needed for static builds
        echo "Static build - no additional dependencies required"

    - name: Build and Package Client
      id: build-package
      env:
        GOOS: ${{ matrix.platform }}
        GOARCH: ${{ matrix.arch }}
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          cd client
          go build -ldflags="-s -w -extldflags=-static" -tags="osusergo,netgo" -o "smart-finder-client-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}" .
          cd ..
          echo "artifact_name=client-${{ matrix.platform }}-${{ matrix.arch }}" >> $GITHUB_OUTPUT
          echo "artifact_path=client/smart-finder-client-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}" >> $GITHUB_OUTPUT
        fi
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          $env:CGO_ENABLED="1"
          cd client
          go build -ldflags="-s -w -H=windowsgui" -tags="osusergo,netgo" -o "smart-finder-client-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}" .
          cd ..
          $ZIP_NAME="smart-finder-client-${{ matrix.platform }}-${{ matrix.arch }}.zip"
          Compress-Archive -Path "client/smart-finder-client-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}" -DestinationPath "client/$ZIP_NAME"
          echo "artifact_name=client-${{ matrix.platform }}-${{ matrix.arch }}-zip" >> $GITHUB_OUTPUT
          echo "artifact_path=client/$ZIP_NAME" >> $GITHUB_OUTPUT
        fi
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          export CGO_ENABLED=1
          APP_NAME="Smart Finder"
          BINARY_NAME="smart-finder-client"
          APP_BUNDLE_NAME="$APP_NAME.app"
          DIST_DIR="dist"
          mkdir -p $DIST_DIR
          APP_BUNDLE_PATH="$DIST_DIR/$APP_BUNDLE_NAME"
          SRC_ICON_PATH="client/internal/icon/icon.png"
          mkdir -p "$APP_BUNDLE_PATH/Contents/MacOS"
          mkdir -p "$APP_BUNDLE_PATH/Contents/Resources"
          TMP_DIR=$(mktemp -d)
          ICONSET_DIR="$TMP_DIR/icons.iconset"
          mkdir -p "$ICONSET_DIR"
          CLEAN_ICON_PATH="$TMP_DIR/clean_icon.png"
          sips -s format png "$SRC_ICON_PATH" --out "$CLEAN_ICON_PATH"
          sips -z 16 16     "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_16x16.png"
          sips -z 32 32     "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_16x16@2x.png"
          sips -z 32 32     "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_32x32.png"
          sips -z 64 64     "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_32x32@2x.png"
          sips -z 128 128   "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_128x128.png"
          sips -z 256 256   "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_128x128@2x.png"
          sips -z 256 256   "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_256x256.png"
          sips -z 512 512   "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_256x256@2x.png"
          sips -z 512 512   "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_512x512.png"
          sips -z 1024 1024 "$CLEAN_ICON_PATH" --out "$ICONSET_DIR/icon_512x512@2x.png"
          iconutil -c icns "$ICONSET_DIR" -o "$APP_BUNDLE_PATH/Contents/Resources/icon.icns"
          cd client
          go build -ldflags="-s -w" -o "../$APP_BUNDLE_PATH/Contents/MacOS/$BINARY_NAME" .
          cd ..
          PLIST_PATH="$APP_BUNDLE_PATH/Contents/Info.plist"
          cat > "$PLIST_PATH" << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>${BINARY_NAME}</string>
              <key>CFBundleIconFile</key>
              <string>icon</string>
              <key>CFBundleIdentifier</key>
              <string>com.yourcompany.smartfinder</string>
              <key>CFBundleName</key>
              <string>${APP_NAME}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleVersion</key>
              <string>1.0</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>NSHighResolutionCapable</key>
              <true/>
              <key>LSUIElement</key>
              <true/>
          </dict>
          </plist>
          EOL
          codesign --force --deep --sign - "$APP_BUNDLE_PATH"
          DMG_NAME="smart-finder-client-${{ matrix.platform }}-${{ matrix.arch }}.dmg"
          hdiutil create -volname "$APP_NAME" -srcfolder "$APP_BUNDLE_PATH" -ov -format UDZO "$DIST_DIR/$DMG_NAME"
          echo "artifact_name=client-${{ matrix.platform }}-${{ matrix.arch }}-dmg" >> $GITHUB_OUTPUT
          echo "artifact_path=$DIST_DIR/$DMG_NAME" >> $GITHUB_OUTPUT
        fi

    - name: Upload Client Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build-package.outputs.artifact_name }}
        path: ${{ steps.build-package.outputs.artifact_path }}

  build-gateway:
    name: Build Gateway
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            ext: ""
          - os: windows-latest
            platform: windows
            arch: amd64
            ext: ".exe"
          - os: windows-latest
            platform: windows
            arch: arm64
            ext: ".exe"
          - os: macos-latest
            platform: darwin
            arch: amd64
            ext: ""
          - os: macos-latest
            platform: darwin
            arch: arm64
            ext: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Set up build dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ca-certificates

    - name: Set up build dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # No additional dependencies needed for static builds
        echo "Static build - no additional dependencies required"

    - name: Set up build dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # No additional dependencies needed for static builds
        echo "Static build - no additional dependencies required"

    - name: Build Gateway
      env:
        GOOS: ${{ matrix.platform }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: ${{ env.CGO_ENABLED }}
        GOAMD64: v1
      run: |
        cd gateway
        go build -ldflags="-s -w -extldflags=-static" -tags="osusergo,netgo" -o "smart-finder-gateway-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}" .

    - name: Upload Gateway Artifact
      uses: actions/upload-artifact@v4
      with:
        name: gateway-${{ matrix.platform }}-${{ matrix.arch }}
        path: gateway/smart-finder-gateway-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}

  create-release:
    name: Create Release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build-client, build-gateway]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/client-*/*
          artifacts/gateway-*/*
          gateway/config/config.yaml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}